name: DVC + MinIO

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  ci:
    runs-on: ubuntu-latest

    services:
      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        ports:
          - 9000:9000
          - 9001:9001
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live || exit 1"
          --health-interval 10s --health-timeout 5s --health-retries 5
        command: ["server","/data","--console-address",":9001"]

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DVC_S3_ENDPOINT: http://localhost:9000
      DVC_REMOTE: minio

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install DVC and deps
        run: |
          python -m pip install --upgrade pip
          pip install "dvc[s3]" minio

      - name: Configure DVC remote
        run: |
          dvc remote add -d "$DVC_REMOTE" s3://dvcstore/project || true
          dvc remote modify "$DVC_REMOTE" endpointurl "$DVC_S3_ENDPOINT"
          dvc remote modify "$DVC_REMOTE" use_ssl false

      - name: Ensure bucket exists
        run: |
          python - <<'PY'
          from minio import Minio
          import os, time
          host = os.environ["DVC_S3_ENDPOINT"].replace("http://","").replace("https://","")
          client = Minio(host, access_key=os.environ["AWS_ACCESS_KEY_ID"],
                         secret_key=os.environ["AWS_SECRET_ACCESS_KEY"], secure=False)
          for _ in range(40):
              try:
                  client.list_buckets(); break
              except Exception:
                  time.sleep(2)
          if not client.bucket_exists("dvcstore"):
              client.make_bucket("dvcstore")
          print("Bucket dvcstore OK.")
          PY

      - name: Cache DVC .dvc/cache
        uses: actions/cache@v4
        with:
          path: .dvc/cache
          key: dvc-${{ runner.os }}-${{ hashFiles('dvc.lock') }}
          restore-keys: |
            dvc-${{ runner.os }}-

      - name: Reproduce pipeline
        run: |
          python -m pip install -r requirements.txt || true
          dvc repro -v
          dvc metrics show

      - name: Upload metrics artifact
        uses: actions/upload-artifact@v4
        with:
          name: metrics
          path: metrics/score.json

      - name: Push DVC cache (only on main)
        if: github.ref == 'refs/heads/main'
        run: dvc push -v